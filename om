#!/bin/bash
source ./scripts/omapis.sh
source ./scripts/downloads.sh
source ./scripts/configureBackup.sh
source ./scripts/init.sh

#Pre-requisite create /data folder

## om install --config=om-config.json --platform=rhel/amazon\ (Working)
## om list --available-versions # To list available versions (Working)
## om list --available-platforms --version=4.2# To list availble platforms (Working)
## om install --requirements --platform=[Amazon/Redhat/SUSE/Centos/Ubuntu/Debian] (Working)
## om list --installed-versions # To know the currently installed versions via this script (Under development)

## echo $# --Total Number of Arguments
command=$1
echo $command

AUTOMATIONDIR="/var/log/mongodb-mms-automation"
OMRELEASEDIR="/opt/mongodb"
CONFDIR="/opt/mongodb/conf"
MONGODRELEASES="/opt/mongodb/mms/mongodb-releases/"

if [[ "$command" == "install" ]] 
then
    echo "The commadn is --> $command"   

    for options in "$@"
        do
        
            key=`echo $options | cut -d '=' -f1`
            value=`echo $options | cut -d '=' -f2`

            case $key in
            "--config")
            configpath="$value"
            ;;
            "--requirements")
            requirements="true"
            ;;
            "--platform")
            platform="$value"
            ;;
            esac
            
        done
    if [[ $requirements == "true" ]]
    then
        `cat requirements.txt | grep -i $platform | cut -d ':' -f2`
    else

        echo "#############################"
        echo "#Running some pre-checks....#"
        echo "#############################"
        echo "Reading config from $configpath"

        prechecks $AUTOMATIONDIR $OMRELEASEDIR $CONFDIR $MONGODRELEASES

        version=$(cat $configpath | jq  .opsManager[].version)
        version01=$(cat $configpath | jq -r .opsManager[].version)
        package=$(cat $configpath | jq  .opsManager[].package)
        platform=$(cat $configpath | jq  .opsManager[].platform)

        hostscount=$(jq -r '.processes[].hostname' cluster-config.json | wc -l)
        cp cluster-config.json cluster-config-backup.json
        for ((i=0; i<$hostscount; i++));
            do
                dbport=`jq -r '.mongodProcesses[].servers['$i'].port' $configpath`
                replsetname=`jq -r '.mongodProcesses[].servers['$i'].replSetName' $configpath`
                dbpath=`jq -r '.mongodProcesses[].servers['$i'].dbPath' $configpath`
                logpath=`jq -r '.mongodProcesses[].servers['$i'].logpath' $configpath`
                host=`jq -r '.mongodProcesses[].servers['$i'].hostname' $configpath`
                dbname=`jq -r '.mongodProcesses[].servers['$i'].name' $configpath`
                fcv=`jq -r '.mongodProcesses[].servers['$i'].featureCompatibilityVersion' $configpath`
                dbversion=`jq -r '.mongodProcesses[].servers['$i'].version' $configpath`
                
                cat cluster-config.json | jq '.processes['$i'].args2_6.net.port = $dbport' --argjson dbport "$dbport"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json | jq '.processes['$i'].args2_6.replication.replSetName = $replsetname' --arg replsetname "$replsetname"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json | jq '.processes['$i'].args2_6.storage.dbPath = $dbpath' --arg dbpath "$dbpath"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.processes['$i'].args2_6.systemLog.path = $logpath' --arg logpath "$logpath"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.processes['$i'].hostname = $host' --arg host "$host"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.processes['$i'].name = $dbname' --arg dbname "$dbname"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.processes['$i'].featureCompatibilityVersion = $fcv' --arg fcv "$fcv"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.processes['$i'].version = $dbversion' --arg dbversion "$dbversion"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json
                
                cat cluster-config.json| jq '.replicaSets[0]._id = $replsetname' --arg replsetname "$replsetname"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json

                cat cluster-config.json| jq '.replicaSets[0].members['$i'].host = $dbname' --arg dbname "$dbname"  >cluster-test-config.json
                mv cluster-test-config.json cluster-config.json

            done
        
        cp cluster-config.json $CONFDIR/cluster-config$version01.json
        echo "Desired cluster-config$version01.json has been modified"
        echo "Downloading Ops Manager Achived Releases Json"
        DOWNLOAD_URL=$(cat $OMRELEASEDIR/omreleases.json | jq -r '.currentReleases[] | select(.version | contains('$version')) | .platform[] | select(.os | contains('"$platform"')) | .packages.links[].download_link | select(. | contains('$package'))')

        #Check if the desired version is in Current Releases
        if [[ "$DOWNLOAD_URL" == "" ]]
        then
            DOWNLOAD_URL=$(cat $OMRELEASEDIR/omreleases.json | jq -r '.oldReleases[] | select(.version | contains('$version')) | .platform[] | select(.os | contains('"$platform"')) | .packages.links[].download_link | select(. | contains('$package'))')
        fi

        if [[ "$DOWNLOAD_URL" == "" ]]
        then
            echo "It appears that the version $version you are looking for doesn't exist. Below are the versions available:"
            cat $OMRELEASEDIR/omreleases.json | jq '.currentReleases[].version | select(. | contains("4.4.","4.2.","4.3."))'
            cat $OMRELEASEDIR/omreleases.json | jq '.oldReleases[].version | select(. | contains("4.4.","4.2.","4.3."))'
            echo "Change the om-config.json to include correct Ops Manager Version. See you again, Thanks!"
            echo
        else

            mms_automation_bin=$OMRELEASEDIR/mongodb-mms-automation
            #Start Automation Agent in Headless Mode:
            echo "############################################"
            echo "Starting Automation Agent in Headless Mode:"
            echo "############################################"
            MMSAUTOMATION="$mms_automation_bin/mongodb-mms-automation-agent -pidfilepath /var/log/mongodb-mms-automation-agent.pid \
            -maxLogFileDurationHrs 24 -logLevel INFO -logFile /var/log/mongodb-mms-automation/automation-agent.log \
            -healthCheckFilePath /var/log/mongodb-mms-automation/agent-health-status.json -cluster $CONFDIR/cluster-config$version01.json 2>&1 >   $mms_automation_bin/headless_agent.log &"

            $mms_automation_bin/mongodb-mms-automation-agent -pidfilepath /var/log/mongodb-mms-automation-agent.pid \
            -maxLogFileDurationHrs 24 -logLevel INFO -logFile /var/log/mongodb-mms-automation/automation-agent.log \
            -healthCheckFilePath /var/log/mongodb-mms-automation/agent-health-status.json -cluster $CONFDIR/cluster-config$version01.json 2>&1 >   $mms_automation_bin/headless_agent.log &

            dbport01=`jq -r '.mongodProcesses[].servers[0].port' $configpath`
            dbport02=`jq -r '.mongodProcesses[].servers[1].port' $configpath`
            dbport03=`jq -r '.mongodProcesses[].servers[2].port' $configpath`

            mongod_count=`ss -ltnp | grep "$dbport01\|$dbport02\|$dbport03" | wc -l`
            for ((; $mongod_count<3; ));
                do
                    echo "Waiting for mongod processes to be in healthy state. \
                        Currently $mongod_count processes up. \
                        Sleeping for 05 Seconds: Sorry!"
                    sleep 5
                    mongod_count=`ss -ltnp | grep "$dbport01\|$dbport02\|$dbport03" | wc -l`
                done

            version=$(cat $configpath | jq -r .opsManager[].version)

            if [ $mongod_count -eq 3 ]
            then
                echo
                echo "MongoDB Processes are in healthy State, preparing to download Ops Manager:"
                echo    
                echo "################################################"
                echo "Download URL for Ops Manager from: $DOWNLOAD_URL"
                echo "################################################"
                ## Installing Ops Manager
                FILE_NAME="mongodb-mms$version"  # mongodb-mms4.2.15
                MMSFOLDER=$OMRELEASEDIR/$FILE_NAME # /opt/mongodb/mongodb-mms4.2.15

                if [[ -d $MMSFOLDER ]]
                then 
                    echo "The require version $MMSFOLDER already exists, skipping downloading it."
                else
                    download_mms $DOWNLOAD_URL $MMSFOLDER
                    MMSTAR=$MMSFOLDER.tar.gz

                    ARCHIVE_NAME=`echo "$DOWNLOAD_URL" | cut -d '/' -f6 | sed 's/.tar.gz//'`
                    tar -xvzf $MMSTAR --directory $OMRELEASEDIR
                    mv $OMRELEASEDIR/$ARCHIVE_NAME $MMSFOLDER
                    rm -rf $MMSTAR
                    echo "MMSTAR $MMSTAR"
                fi



                MMS_BIN="$MMSFOLDER/bin/mongodb-mms"

                host01=`jq -r '.mongodProcesses[].servers[0].hostname' $configpath`
                host02=`jq -r '.mongodProcesses[].servers[1].hostname' $configpath`
                host03=`jq -r '.mongodProcesses[].servers[2].hostname' $configpath`

                CONNSTRING="mongo.mongoUri=mongodb://$host01:$dbport01,$host02:$dbport02,$host03:$dbport03/?maxPoolSize=150"
                sed 's+mongo.mongoUri=mongodb://localhost:27017,localhost:27018,localhost:27019/?maxPoolSize=150+'$CONNSTRING'+g' conf-mms.properties >conf-mms.properties.bak
                
                EC2HOSTNAME=`curl http://169.254.169.254/latest/meta-data/public-hostname`
                if [[ "$EC2HOSTNAME" == "" ]]
                then
                    EC2HOSTNAME=`hostname -f`
                fi
                
                # Add conf-mms.properties values
                echo "mms.centralUrl=http://$EC2HOSTNAME:8080" >> conf-mms.properties.bak
                echo "mms.ignoreInitialUiSetup=true" >> conf-mms.properties.bak
                echo "mms.fromEmailAddr=example@example.com" >> conf-mms.properties.bak
                echo "mms.replyToEmailAddr=example@example.com" >> conf-mms.properties.bak
                echo "mms.adminEmailAddr=example@example.com" >> conf-mms.properties.bak
                echo "mms.mail.transport=smtps" >> conf-mms.properties.bak
                echo "mms.mail.hostname=mail.example.com" >> conf-mms.properties.bak
                echo "mms.mail.port=465" >> conf-mms.properties.bak

                cp -f conf-mms.properties.bak "$MMSFOLDER/conf/conf-mms.properties"
                echo "###################################################################################"
                echo "Starting Ops Manager $version from bin location $MMS_BIN"
                echo "###################################################################################"
                $MMS_BIN start

                #Creating First User:
                login=`cat $configpath | jq -r '.opsManager[].userconfig[].login'`
                password=`cat $configpath | jq -r '.opsManager[].userconfig[].password'`
                firstname=`cat $configpath | jq -r '.opsManager[].userconfig[].firstname'`
                lastname=`cat $configpath | jq -r '.opsManager[].userconfig[].lastname'`
                
                #Calling User creation API
                # local omhost=$1
                # local username=$2
                # local password=$3
                # local firstname=$4
                # local firstname=$5

                create_user $EC2HOSTNAME $login $password $firstname $lastname >$MMSFOLDER/userapiresp.log
                error=`cat $MMSFOLDER/userapiresp.log | grep -i errorcode`
                if [[ $error == "" ]]
                then
                    echo "User created successfully."
                    cat $MMSFOLDER/userapiresp.log | jq '.'

                    PRIVATEKEY=`cat $MMSFOLDER/userapiresp.log | jq -r '.programmaticApiKey.privateKey'`
                    
                    if [[ $PRIVATEKEY == "null" ]]
                    then
                        PRIVATEKEY=`cat $MMSFOLDER/userapiresp.log | jq -r '.apiKey'`
                        PUBLICKEY=`cat $MMSFOLDER/userapiresp.log | jq -r '.user.emailAddress'`
                    else
                        PUBLICKEY=`cat $MMSFOLDER/userapiresp.log | jq -r '.programmaticApiKey.publicKey'`
                    fi    
                    HEADDB=`cat $configpath | jq -r '.opsManager[].backupdaemon[].headdb'`
                    BLOCKSTORE=$host01:$dbport01,$host02:$dbport02,$host03:$dbport03
                    FSSTORE=`cat $configpath | jq -r '.opsManager[].backupdaemon[].fsstore'`
                    echo "PUBLICKEY -> $PUBLICKEY PRIVATEKEY -> $PRIVATEKEY"
                    configure_backup $PRIVATEKEY $PUBLICKEY $HEADDB $BLOCKSTORE $FSSTORE $EC2HOSTNAME >>$MMSFOLDER/backupconfig.log
                    echo "If running OM 4.2.x version then enable Backup Daemon at $HEADDB, the Oplog/Blockstore/Filesystem store should be already configured."
                    echo "No action needed for OM 4.4.x deployments."

                else
                    echo "Some error occured when creating user, please check $MMSFOLDER/userapiresp.log"
                    cat $MMSFOLDER/userapiresp.log | jq '.'

                fi

            #     echo -e "****MetaData of your Install**** \n Start Service: $MMS_BIN start \n Stop Service: $MMS_BIN stop \n AppDB Connection: $CONNSTRING \n Url to Access and Setup your Ops Manager: http://$EC2HOSTNAME:8080 \n Start your AppDB:             $mms_automation_bin/mongodb-mms-automation-agent -pidfilepath /var/log/mongodb-mms-automation-agent.pid \
            # -maxLogFileDurationHrs 24 -logLevel INFO -logFile /var/log/mongodb-mms-automation/automation-agent.log \
            # -healthCheckFilePath /var/log/mongodb-mms-automation/agent-health-status.json -cluster $CONFDIR/cluster-config$version01.json 2>&1 >   $mms_automation_bin/headless_agent.log &" >$MMSFOLDER/$FILE_NAME.info
                echo "Url to Access and Setup your Ops Manager: http://$EC2HOSTNAME:8080" 
 
                INSTALLNAME=`cat $configpath | jq -r '.opsManager[].installName'`

                JSON_STRING=$( jq -n \
                                --arg installname "$INSTALLNAME" \
                                --arg version "$version01" \
                                --arg mmsbin "$MMS_BIN" \
                                --arg mmsautomation "$MMSAUTOMATION"\
                                '{installName: $installname, version: $version, mmsbin: $mmsbin, appdb_bin: $mmsautomation}' )
                echo $JSON_STRING >$OMRELEASEDIR/$INSTALLNAME.info
                echo "A .info file has been placed in $OMRELEASEDIR/$INSTALLNAME.info, it has path to binaries to start Application Database or Ops Manager."
                cat $OMRELEASEDIR/$INSTALLNAME.info | jq '.'
            fi
        fi
    fi
else
    if [[ -f "$OMRELEASEDIR/omreleases.json" ]]
    then
        echo "The file omreleases.json already exist in $OMRELEASEDIR, skip downloading it."
    else  
        mkdir -p $OMRELEASEDIR  
        sudo curl --output $OMRELEASEDIR/omreleases.json https://info-mongodb-com.s3.amazonaws.com/com-download-center/ops_manager_release_archive.json
    fi

    if [["$command" == "init"]]
    then
        platform=`$2 cut -d '=' -f2`
        init platform
    fi

    if [[ "$command" == "list" ]] 
    then
        for options in "$@"
            do
            
                key=`echo $options | cut -d '=' -f1`
                value=`echo $options | cut -d '=' -f2`

                case $key in
                "--available-versions") 
                showversions="true"
                ;;
                "--available-platforms") 
                showplatform="true"
                ;;
                "--installed-versions")
                installedversions="true"
                ;;
                "--version")
                version="$value"
                ;;
                "--requirements")
                requirements="true"
                ;;
                "--platform")
                platform="$value"
                ;;
                esac
            done
        if [[ $showversions == "true" ]] 
        then
            cat $OMRELEASEDIR/omreleases.json | jq '.currentReleases[].version | select(. | contains("4.0.","4.4.","4.2.","4.3."))'
            cat $OMRELEASEDIR/omreleases.json | jq '.oldReleases[].version | select(. | contains("4.0.","4.4.","4.2.","4.3."))'
        else   
            if [[ $showplatform == "true" ]] 
            then
                echo $value
                cat $OMRELEASEDIR/omreleases.json | jq '.oldReleases[] | select(.version | contains("4.0.","4.4.","4.2.","4.3.")) | [.version, .platform[].os] | select(.[] | contains("'$version'"))' 
                cat $OMRELEASEDIR/omreleases.json | jq '.oldReleases[] | select(.version | contains("4.0.","4.4.","4.2.","4.3.")) | [.version, .platform[].os] | select(.[] | contains("'$version'"))' 
            fi
            
        fi
        if [[ $requirements == "true" ]] 
        then
            echo "Requirements for OM:"
            cat requirements.txt | grep -i "$platform"
        fi       
    fi    
fi